[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with R for Economists",
    "section": "",
    "text": "Preface\nR is a free and powerful software environment for statistical computing and data visualization. It is widely used in academia and industry for data analysis and research. As one of the top programming languages for data science, R provides a variety of tools for statistical modeling, computing, and visualization.\nSince empirical research is essential in economics, programming skills are crucial for conducting real-world data analysis. This textbook will introduce you to R and help you develop fundamental data science skills.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Getting Started with R for Economists",
    "section": "About This Book",
    "text": "About This Book\nThis textbook is designed for beginners, providing a strong foundation in R for economic research. It focuses on the tidyverse ecosystem, a collection of R packages that provide a simple yet powerful approach to data analysis. You will learn how to use tidy tools to manage and analyze data efficiently, covering the entire lifecycle of a data science project.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-can-benefit-from-this-book",
    "href": "index.html#who-can-benefit-from-this-book",
    "title": "Getting Started with R for Economists",
    "section": "Who Can Benefit from This Book",
    "text": "Who Can Benefit from This Book\nI wrote this textbook for two groups of readers. The first group is the participants of the workshop Getting Started with R for Economists: A Hands-On Workshop, which was organized for the 52nd Meeting of the Sri Lanka Forum of University Economists. This book serves as a companion to that workshop. Since the workshop lasts only one hour, the goal is to introduce participants to the tidyverse workflow and give them a strong foundation so they can continue learning on their own.\nThe second group is any economist who is new to programming and wants to start analyzing data using R. This book is a good starting point for your journey. However, to master each topic fully, I recommend reading more advanced textbooks on R, covering the different areas discussed here.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#share-your-thoughts",
    "href": "index.html#share-your-thoughts",
    "title": "Getting Started with R for Economists",
    "section": "Share Your Thoughts!",
    "text": "Share Your Thoughts!\nThis book is still a work in progress. If you have any suggestions to improve the content, feel free to open a GitHub issue here. I’d love to hear from you! 🚀",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction to R and RStudio",
    "section": "",
    "text": "1.1 Installing R and Rstudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#installing-r-and-rstudio",
    "href": "intro.html#installing-r-and-rstudio",
    "title": "1  Introduction to R and RStudio",
    "section": "",
    "text": "Step 1: First download R freely from the Comprehensive R Archive Network (CRAN) https://cran.r-project.org/. (At the moment of writing, R 4.4.2 is the latest version. Choose the most recent one.)\nStep 2: Then install R Studio’s IDE (stands for integrated development environment), a powerful user interface for R from [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/. Get the Open Source Edition of RStudio Desktop. RStudio allows you to run R in a more user-friendly environment.\n\nYou need to install both R and Rstudio to use RStudio.\nIf you have a pre-existing installation of R and/or RStudio, I highly recommend that you reinstall both and get as current as possible.\n\nStep 3: Then open Rstudio.\n\n\n1.1.1 Posit Cloud\n\nIn 2022, RStudio changed its corporate name to Posit with the aim of expanding its focus beyond R to include users of Python and Visual Studio Code.\nIf you don’t want to download or install R and R Studio, you can use RStudio on Posit Cloud for free.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#rstudio-layout",
    "href": "intro.html#rstudio-layout",
    "title": "1  Introduction to R and RStudio",
    "section": "1.2 RStudio layout",
    "text": "1.2 RStudio layout\nThe RStudio interface consists of four panes: See Figure 1)\n\nSource pane\nConsole pane\nEnvironment pane, containing the Environment, History, Connections, Build, and Tutorial tabs\nOutput pane, containing the Files, Plots, Packages, Help, Viewer, and Presentation tabs\n\n\n\n\n\n\nRStudio layout\n\n\n\n\n\n1.2.1 Console Pane\n\nThis is where you type and execute all your R commands.\nYou can enter R commands after the ‘&gt;’ prompt, and R will process and execute them.\nThis is the most essential window, as it is where R performs computations and executes your instructions.\n\n\n\n1.2.2 Source pane\n\nIn this window, a collection of commands (scripts) can be edited and saved.\nIf this window is not visible, you can open it via File → New File → R Script.\nSimply typing a command in the Source pane is not enough; it must be sent to the Console before R executes it.\nTo run a line from the Source pane, place your cursor on the desired line or select multiple lines to execute, then click Run or press CTRL + ENTER to send them to the Console pane.\nMake sure to save the ‘Untitled1’ file as a *.R script.\n\n\n\n1.2.3 Environment pane\n\nThis window contains multiple tabs: Environment, History, Connections, Build, and Tutorial.\n\nThe Environment tab displays all active objects.\n\nFor data frames, clicking the grid symbol opens the full data frame in the Source pane.\nThe History tab shows previously typed commands.\nTo send a command in the history tab to the Source pane, select it and click the “To Source” icon, or click “To Console” to execute it in the Console.\n\n\n\n1.2.4 Output Pane\n\nThis window contains multiple tabs: Files, Plots, Packages, Help, Viewer, and Presentation.\nIt allows you to open files, view plots (including previous ones), install and load packages, access help functions, and display web content such as Shiny apps and Quarto-generated web pages.\n\nNow you are familiar with the layout. Let’s begin with R basics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#installing-an-r-package",
    "href": "intro.html#installing-an-r-package",
    "title": "1  Introduction to R and RStudio",
    "section": "1.3 Installing an R Package",
    "text": "1.3 Installing an R Package\n\nThe primary source for R packages is CRAN (Comprehensive R Archive Network).\nPackages can be installed using the install.packages() function in R.\nTo install a single package, pass its name as the first argument to install.packages().\nThe following code installs the tidyverse package from CRAN:\n\n\ninstall.packages(\"tidyverse\")\n\n\nThis command downloads and installs the tidyverse package from CRAN.\nAny dependencies required by the package will also be downloaded and installed.\nInstalling the tidyverse package may take several minutes, but you only need to do this once. Think of it like installing a mobile app—you install it once on your smartphone and can use its features until a new version is released, at which point you may need to update it\n\n\n1.3.1 Alternative way to install R packages in Rstudio\n\nAn alternative way to install R packages is through the Packages tab in the Output Pane.\nNavigate to the Packages tab in the Output Pane and click Install.\nUnder “Install from,” select “Repository (CRAN)”.\nIn the Packages field, enter the name of the package you want to install.\nTo install multiple packages at once, separate the package names with commas.\nFinally, click Install.\n\n\n\n\n\n\nAlternative way to install R packages in Rstudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#loading-an-r-package",
    "href": "intro.html#loading-an-r-package",
    "title": "1  Introduction to R and RStudio",
    "section": "1.4 Loading an R Package",
    "text": "1.4 Loading an R Package\n\nInstalling a package does not automatically make it available for use; you must load it. It’s like a mobile app—you need to open it to access its functionalities.\nThe library() function is used to load installed packages into R.\nTo load the tidyverse package, use:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nNote: Do not put the package name in quotes when using library().\nSome packages display messages when loaded, while others do not.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#getting-started-with-r",
    "href": "intro.html#getting-started-with-r",
    "title": "1  Introduction to R and RStudio",
    "section": "1.5 Getting Started with R",
    "text": "1.5 Getting Started with R\nFor a detailed introduction to R, refer to:\nAn Introduction to R: https://cran.r-project.org/doc/manuals/R-intro.pdf",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "rbasics.html",
    "href": "rbasics.html",
    "title": "2  R Programming Basics",
    "section": "",
    "text": "2.1 Data structures\nData Structure Types. Image Source: http://venus.ifca.unican.es/Rintro/dataStruct.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#data-structures",
    "href": "rbasics.html#data-structures",
    "title": "2  R Programming Basics",
    "section": "",
    "text": "R’s basic data structures can be grouped by:\n\nTheir dimensions (1D, 2D, or multi-dimensional).\nWhether they store one type of data (homogeneous) or different types of data (heterogeneous).\n\nThis gives us five common data structures in R:\n\nHomogeneous (same type of data): Vectors, Matrices, Arrays\nHeterogeneous (different types of data): Data Frames, Lists\n\n\n\n\nAmong these, vectors and data frames are the most commonly used data structures in practical applications.\n\n\n2.1.1 Vectors\nCreating vectors\nSyntax\nvector_name &lt;- c(element1, element2, element3)\nExample\n\nx &lt;- c(5, 6, 3, 1, 100)\nx\n\n[1]   5   6   3   1 100\n\n\nCombine two vectors\n\np &lt;- c(1, 2, 3)\np\n\n[1] 1 2 3\n\nq &lt;- c(10, 20, 30)\nq\n\n[1] 10 20 30\n\nr &lt;- c(p, q)\nr\n\n[1]  1  2  3 10 20 30\n\n\nVector with charactor elements\n\ncountries &lt;- c(\"Sri Lanka\", \"Afghanistan\", \"Bangladesh\", \"Bhutan\", \"India\", \"Iran\", \"Maldives\", \"Nepal\", \"Pakistan\")\n\ncountries\n\n[1] \"Sri Lanka\"   \"Afghanistan\" \"Bangladesh\"  \"Bhutan\"      \"India\"      \n[6] \"Iran\"        \"Maldives\"    \"Nepal\"       \"Pakistan\"   \n\n\nLogical vector\n\nresult &lt;- c(TRUE, FALSE, FALSE, TRUE, FALSE)\nresult\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n\nSimplifying vector creation\n\nrep is a function in R that repeats the values in a vector\n\n\nid &lt;- 1:10\nid\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ntreatment &lt;- rep(1:3, each=2)\ntreatment\n\n[1] 1 1 2 2 3 3\n\n\nVector operations\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(10, 20, 30)\nx+y\n\n[1] 11 22 33\n\np &lt;- c(100, 1000)\nx+p\n\nWarning in x + p: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  101 1002  103",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#data-frames",
    "href": "rbasics.html#data-frames",
    "title": "2  R Programming Basics",
    "section": "2.2 Data Frames",
    "text": "2.2 Data Frames\nRequired R package to deal with data frames\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCreate a tibble\n\nA tibble is an improved version of a traditional data frame in R, designed to be more user-friendly and consistent.\nIt is part of the tidyverse package and makes it easier to view and analyze data, especially when working with large datasets.\n\nLets consider the following example\nGDP per capita (current US$) - South Asia\nData Source : https://data.worldbank.org/\n\n\n\nCountry\nMost Recent Year\nMost Recent Value\n\n\n\n\nAfghanistan\n2023\n415.7\n\n\nBangladesh\n2023\n2,551.0\n\n\nBhutan\n2023\nNA\n\n\nIndia\n2023\n2,480.8\n\n\nMaldives\n2023\n12,530.4\n\n\nNepal\n2023\n1,377.6\n\n\nPakistan\n2023\n1,365.3\n\n\nSri Lanka\n2023\n3,828.0\n\n\n\n\ncountry &lt;- c(\"Afghanistan\", \"Bangladesh\", \"Bhutan\", \"India\", \"Maldives\",\n             \"Nepal\", \"Pakistan\", \"Sri Lanka\")\nyear &lt;- c(rep(2023,8))\nvalue &lt;- c(415.7, 2551.0, NA, 2480.8, 12530.4, 1377.6, 1365.3, 3828.0)\n\nfinal &lt;- tibble(Country = country, Recent_Year = year, Value = value )\nfinal\n\n# A tibble: 8 × 3\n  Country     Recent_Year  Value\n  &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan        2023   416.\n2 Bangladesh         2023  2551 \n3 Bhutan             2023    NA \n4 India              2023  2481.\n5 Maldives           2023 12530.\n6 Nepal              2023  1378.\n7 Pakistan           2023  1365.\n8 Sri Lanka          2023  3828",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#functions-in-r",
    "href": "rbasics.html#functions-in-r",
    "title": "2  R Programming Basics",
    "section": "2.3 Functions in R",
    "text": "2.3 Functions in R\n\nIn R, functions are blocks of code that perform specific tasks.\nThey take input values (called arguments), process them, and return an output.\nFunctions help automate repetitive tasks and make code more efficient.\nThere are two main types of functions in R:\n\nBuilt-in functions – Predefined in R (e.g., mean(), sum(), rep()).\n\n\n\nsummary(final$Value)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  415.7  1371.5  2480.8  3507.0  3189.5 12530.4       1 \n\n\n- User-defined functions – Created by users for specific needs using function().",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#subsetting",
    "href": "rbasics.html#subsetting",
    "title": "2  R Programming Basics",
    "section": "2.4 Subsetting",
    "text": "2.4 Subsetting\n\nfinal\n\n# A tibble: 8 × 3\n  Country     Recent_Year  Value\n  &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan        2023   416.\n2 Bangladesh         2023  2551 \n3 Bhutan             2023    NA \n4 India              2023  2481.\n5 Maldives           2023 12530.\n6 Nepal              2023  1378.\n7 Pakistan           2023  1365.\n8 Sri Lanka          2023  3828 \n\nfinal[1, 1]\n\n# A tibble: 1 × 1\n  Country    \n  &lt;chr&gt;      \n1 Afghanistan\n\n\n\nfinal[, 1]\n\n# A tibble: 8 × 1\n  Country    \n  &lt;chr&gt;      \n1 Afghanistan\n2 Bangladesh \n3 Bhutan     \n4 India      \n5 Maldives   \n6 Nepal      \n7 Pakistan   \n8 Sri Lanka  \n\nfinal[1, ]\n\n# A tibble: 1 × 3\n  Country     Recent_Year Value\n  &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan        2023  416.\n\nfinal$Country\n\n[1] \"Afghanistan\" \"Bangladesh\"  \"Bhutan\"      \"India\"       \"Maldives\"   \n[6] \"Nepal\"       \"Pakistan\"    \"Sri Lanka\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#help-file-for-built-in-functions",
    "href": "rbasics.html#help-file-for-built-in-functions",
    "title": "2  R Programming Basics",
    "section": "2.5 Help file for Built-in functions",
    "text": "2.5 Help file for Built-in functions\n\nTo access the help file for a built-in function in R, you can use either ? or the help() function.\nRunning either of these commands will open the help page for the specified function.\n\n= For example, using ?summary or help(summary) will display the help file for the summary function, which is part of the base R package.\n\n?summary\n\n# or \n\nhelp(summary)\n\n\n\n\n\n\nHelp Page",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#commenting",
    "href": "rbasics.html#commenting",
    "title": "2  R Programming Basics",
    "section": "2.6 Commenting",
    "text": "2.6 Commenting\n\nmean(final$Value) # Calculate the average GDP value\n\n[1] NA\n\n\nWhen you go to the help page for the mean() function, you’ll find that by default, the na.rm argument is set to FALSE. This means that if the data contains missing values (NA), they will be included in the calculation, and the result will also be NA. To calculate the mean while ignoring missing values, you should set na.rm = TRUE.\n\nmean(final$Value, na.rm = TRUE) # Calculate the average GDP value\n\n[1] 3506.971",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#pipe-operator",
    "href": "rbasics.html#pipe-operator",
    "title": "2  R Programming Basics",
    "section": "2.7 Pipe operator (|>)",
    "text": "2.7 Pipe operator (|&gt;)\n\nThe pipe operator (|&gt;) in the base R package helps improve the readability of your code.\nIt takes the output of one function and passes it directly into another function as an argument, making the steps in your data analysis more connected.\nInstead of using nested function calls like function(first_input, other_inputs), you can write the same command in a simpler format: first_input |&gt; function(other_inputs).\n\n\n\n\n\n\nPipe Operator\n\n\n\n\n\nTherefore, using the pipe operator allows you to chain multiple operations together in a way that is easier to read and understand compared to nested function calls.\n\n\n# Nested function call\nmean(final$Value, na.rm = TRUE)\n\n[1] 3506.971\n\n\n\n# Using pipe operator) \nfinal$Value |&gt; mean(na.rm=TRUE)\n\n[1] 3506.971",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rprojects.html",
    "href": "rprojects.html",
    "title": "3  Scripts and Rstudio Projects",
    "section": "",
    "text": "3.1 Working with R Scripts\nWorking with R script files",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "rprojects.html#working-with-r-scripts",
    "href": "rprojects.html#working-with-r-scripts",
    "title": "3  Scripts and Rstudio Projects",
    "section": "",
    "text": "To open a script file, go to File -&gt; New File -&gt; R Script.\nYou can use a script file to save your code so you don’t have to re-type everything when you start a new R session.\nJust typing a command in the script file isn’t enough. It must be sent to the Console before R can execute it.\nTo run a line of code from the script, place your cursor on the line (or select multiple lines), then click Run or press CTRL + ENTER to send them to the Console.\nRemember to save your script with the *.R extension and give it a suitable name, not as ‘Untitled1’.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "rprojects.html#working-with-rstudio-projects",
    "href": "rprojects.html#working-with-rstudio-projects",
    "title": "3  Scripts and Rstudio Projects",
    "section": "3.2 Working with RStudio Projects",
    "text": "3.2 Working with RStudio Projects\nWhen you start working on large projects, you’ll need to manage multiple files, such as input data, script files, and figures. Being organized is very important to manage your work efficiently. This is where RStudio projects help. RStudio projects allow you to keep all the documents related to a project in one folder.\nTo create an RStudio project, go to File -&gt; New Project -&gt; New Directory -&gt; New Project, and then choose a suitable name for the folder to store your work. You also need to pick a location to save your project by setting the “Create project as subdirectory of” option. In the following example, I named my project “Test” and selected the Desktop to store it.\n\n\n\n\n\nWorking with RStudio Projects\n\n\n\n\nOnce this is done, I now have a new RStudio project called “Test” on my Desktop. This project looks like a regular folder where I can save all my work. If you open the folder, you will see a .Rproj file (R Project file). In my example, since I saved my project as “Test,” the R project file is called “Test.Rproj.” Inside this folder, you can create subfolders, like one for figures called figures, another for raw data files called data, and another for your R script files called scripts.\nLet’s say you’re done working on the project for the day. Now, close the project and quit RStudio.\nThe next day, when you come back to the project, locate the folder (in my case, it’s on the Desktop), open it, and double-click the .Rproj file. This will reopen the project, and you’ll pick up right where you left off. You’ll have access to all the files you’ve saved inside the RStudio Project.\nThe only things you can’t retrieve are the commands you typed directly into the console and any unsaved outputs, like summary statistics or figures that were not saved.\nBut script files at least allow you to save time by preventing you from retyping commands or complex code you’ve already written in previous sessions. They’re better than typing directly into the console.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "4  Reproducible Reporting with Quarto",
    "section": "",
    "text": "4.1 Dynamic documents\nDynamic documents are important because they:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible Reporting with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#dynamic-documents",
    "href": "quarto.html#dynamic-documents",
    "title": "4  Reproducible Reporting with Quarto",
    "section": "",
    "text": "They let us add R code directly into the document, and the code runs automatically to include the results.\nThey update analyses and visuals automatically when data changes, saving time and reducing mistakes.\nThey help recreate results easily, making analyses more transparent and consistent.\nThey make it simple to share analysis and results with team members, improving collaboration and communication.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible Reporting with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#dynamic-documents-with-quarto",
    "href": "quarto.html#dynamic-documents-with-quarto",
    "title": "4  Reproducible Reporting with Quarto",
    "section": "4.2 Dynamic Documents with Quarto",
    "text": "4.2 Dynamic Documents with Quarto\nBoth R Markdown and Quarto allow you to create dynamic documents. Quarto is the next generation of R Markdown, so in this book, I will focus on Quarto. For those already familiar with R Markdown, you’ll find the transition to Quarto very easy, as the syntax is very similar.\n\n4.2.1 Installing Quarto\nA stable release of Quarto is included with RStudio version 2022.07.1 and later. Upgrading to future versions of RStudio will also upgrade the bundled version of Quarto.\n\n\n4.2.2 Why Quarto ?\n\nQuarto supports multiple programming languages (R, Python, Julia, and more) within the same document, allowing for a more versatile workflow.\nQuarto provides a wider range of output formats, including HTML, PDF, Word, and slides, all from a single document. This flexibility makes it easier to publish content in various formats without needing separate files.\nQuarto is designed with modern development practices in mind, making it easier to integrate with version control systems like Git.\nQuarto offers advanced features for customization, including the ability to create custom formats and templates, which can help in producing highly tailored outputs.\nQuarto is actively developed with a focus on modern data science practices, which means it benefits from ongoing improvements and a growing community.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible Reporting with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#getting-started-with-quarto",
    "href": "quarto.html#getting-started-with-quarto",
    "title": "4  Reproducible Reporting with Quarto",
    "section": "4.3 Getting Started with Quarto",
    "text": "4.3 Getting Started with Quarto\nLet’s get started with Quarto:\n\nFirst, go to File -&gt; New File -&gt; Quarto Document...\n\n\n\n\n\n\nGetting Started with Quarto\n\n\n\n\n\nAssign a name for the document title. You can always change the title later.\n\n\n\n\n\n\nAssign a name for the document title\n\n\n\n\n\nChoose your preferred output format. In this example, I’ve selected HTML, which is the default setting. You can switch to PDF or Word output at any time using the same source file, with just minor changes to the output type.\nThis will open a Quarto document called “Untitled1*” with example content. First, save the document with an appropriate file name.\nTo get a feel for Quarto, let’s render the example document and check the output.\nUse the Render button in the RStudio IDE to render the file and preview the output.\nTo view the output in the Viewer Pane, click the settings button next to the Render button on the right side, and select the option “Preview in Viewer Pane”.\n\n\n\n\n\n\nSave the document with an appropriate file name\n\n\n\n\n\nYou will see the rendered output with both the code and the results in a single document.\nIf you go to the directory where you saved the .qmd file (the Quarto source file), you will also find the generated HTML output with the same name in the same directory.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible Reporting with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#anatomy-of-a-quarto-document",
    "href": "quarto.html#anatomy-of-a-quarto-document",
    "title": "4  Reproducible Reporting with Quarto",
    "section": "4.4 Anatomy of a Quarto document",
    "text": "4.4 Anatomy of a Quarto document\nNow that you know how to render a Quarto document, let’s get familiar with the anatomy of a Quarto document. The file contains three types of content: a YAML header, code chunks, and markdown text.\nIn addition to that, we can view the same .qmd document in two modes of the RStudio editor: visual (on the left) and source (on the right). Open the source window so that you can easily identify the syntax..\n\n4.4.1 YAML header\n\nIn Quarto, YAML (which stands for YAML Ain’t Markup Language) is used for setting up metadata and configurations for your document.\nIt is placed at the top of the Quarto file within three dashes (—), and it allows you to specify document options such as the title, author, output format (HTML, PDF, Word), date, and more.\nIn YAML, the basic format is key: value, where you assign a value to a key.\n\n---\ntitle: \"Getting Started with Quarto\"\nsubtitle: \"Report 1\"\nauthor: \"Priyanga Talagala\"\ndate: \"2025-01-31\"\noutput: html_document\n---\n\n\n4.4.2 Code Chunks\n\nIn Quarto, code chunks are sections of the document where you can write and run code. You can think of this part as a mini console window within the Quarto document.\nA code chunk in Quarto is enclosed between three backticks (```) to separate it from the rest of the text.\nThe code inside these chunks is executed when you render the document, and the output (such as tables, plots, or results) is displayed directly in the final document.\nThese chunks can contain code written in different programming languages, such as R, Python, or Julia. In the following example, {r} indicates that we are going to run R code inside this code chunk.\nIf you want to run Python code, you just need to replace {r} with {python} in the code chunk.\n\n\n\n\n\n\nCode Chunks. LHS : Source file, RHS: Resulted output\n\n\n\n\n\n\n4.4.3 Markdown text\n\nMarkdown text includes formatted text, such as section headers, paragraphs, embedded images, and more. Quarto uses Markdown syntax for writing text, which is clear when you switch to the Source tab.\nTo define section headings, you use the # symbol. The number of # symbols determines the level of the heading: one # for an H1 heading, two ## for an H2 heading, three ### for an H3 heading, and so on.\nIn R Markdown syntax, you can format text as follows:\n\nTo make text bold, use **bold**.\nTo make text italic, use *italic*.\n\n\nThis is **bold** text and this is *italic* text.\nThis is bold text and this is italic text.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible Reporting with Quarto</span>"
    ]
  },
  {
    "objectID": "dataload.html",
    "href": "dataload.html",
    "title": "5  Data Import and Export",
    "section": "",
    "text": "5.1 Tidy Workflow\nAs an economist, working with empirical research and data is crucial for making data-driven decisions, and data science helps transform raw data into understanding, knowledge, and insights to support this process. A tidy workflow focuses on the tools needed to carry out this process effectively.\nTidy workflow, Image recreated from R for Data Science (2e) (https://r4ds.hadley.nz/intro.html)\nWhen working with data, the first step is to import it into our data science environment. Next, we tidy up the data to make it clean and usable. Then, as data scientists, our main task is to understand the data using three key tools: transformation, visualization, and modeling. Finally, we communicate our results to the right people to support decision-making.\nThe tidyverse package is a collection of R packages that work together to make data analysis easier. When you load tidyverse, it also loads several useful packages, including: dplyr, readr, forcats, stringr, ggplot2, tibble, lubridate, tidyr and purrr\nlibrary(tidyverse)\nLet’s dive into each of these steps in the tidy workflow and explore the tools available in the R ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Import and Export</span>"
    ]
  },
  {
    "objectID": "dataload.html#import-data",
    "href": "dataload.html#import-data",
    "title": "5  Data Import and Export",
    "section": "5.2 Import data",
    "text": "5.2 Import data\nWhen you work with data, you save your raw data in a separate file, like a CSV. You can easily load this external data into the data science environment using the readr package.\n\n5.2.1 Read data files into a tibble\nDownload the dataset: touristsl.csv\n\ndata1 &lt;- read_csv(\"touristsl.csv\")\n\nIf the data file is in another folder within the current working directory, you can use the here function from the here package. With respect to the current working directory, the here function helps you define the file path starting from there.\nFor example, if you have a file called “touristsl.csv” inside a folder called “data” in the current working directory, and you are currently in the working directory, you would need to open the data folder to access the CSV file. In the here function, you define the path as here(\"data\", \"touristsl.csv\"). Each folder you want to open is listed, and they are separated by commas.\n\nlibrary(here)\ndata &lt;- read_csv(here(\"data\", \"touristsl.csv\"))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Import and Export</span>"
    ]
  },
  {
    "objectID": "dataload.html#export-data",
    "href": "dataload.html#export-data",
    "title": "5  Data Import and Export",
    "section": "5.3 Export data",
    "text": "5.3 Export data\nSimilarly, to save a data file, we can use the write_csv function.\n\nweight &lt;- c(50,44,60)\nheight &lt;- c(150,160,163)\nds &lt;- tibble(weight, height)\nwrite_csv(ds, \"ds.csv\")\n\nIf you want to save the data file in another folder within the current working directory, use the here function to define the file path.\n\nlibrary(here)\nwrite_csv(ds, here(\"data\", \"ds.csv\"))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Import and Export</span>"
    ]
  },
  {
    "objectID": "datawrangling.html",
    "href": "datawrangling.html",
    "title": "6  Data Wrangling",
    "section": "",
    "text": "6.1 Data Tidying\nIn this step you try to reshape messy data into a tidy format.\nA tidy dataset follows these key principles:\nThe following examples are taken from published reports by various institutes and contains an untidy data structure. This is a common issue in real-world data. The problematic areas that make the data untidy are highlighted.\nUntidy Data, Image Source: Sri Lanka Export Development Board – Export Performance Indicators 2023\nIn this example, certain cells contain more than one value separated by a comma, making the dataset untidy.\nUntidy Data, Image Source: Central Bank of Sri Lanka – Annual Report 2022\nIn this example, certain cells are merged and presented as a common value using curly braces. This format makes the data untidy and difficult to analyze.\nUntidy Data, Image Source: Disaster Management Centre, Ministry of Defense – River Water Level and Flood Warning Report\nIn this dataset, each cell in the last column contains both a value and a graphical representation, making the data untidy.\nThe tidy step in the tidy workflow ensures that the data adheres to the tidy principles of tidy data.\nThe tidyr package helps you structure data in a tidy format. This often involves:\nFor more details on its functionalities, refer to the tidyr package documentation:.\nA well-organized dataset saves time and ensures accurate results!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "datawrangling.html#data-tidying",
    "href": "datawrangling.html#data-tidying",
    "title": "6  Data Wrangling",
    "section": "",
    "text": "Each variable is placed in its own column.\nEach observation is placed in its own row.\nEach value is placed in its own cell.\n\n\n\nImage Source: Sri Lanka Export Development Board – Export Performance Indicators 2023\n\n\n\n\nImage Source: Central Bank of Sri Lanka – Annual Report 2022\n\n\n\n\nImage Source: Disaster Management Centre, Ministry of Defense – River Water Level and Flood Warning Report\n\n\n\n\n\n\nPivoting: pivot_longer() and pivot_wider()\nSeparating or uniting columns: separate() and unite()",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "datawrangling.html#data-transformation",
    "href": "datawrangling.html#data-transformation",
    "title": "6  Data Wrangling",
    "section": "6.2 Data Transformation",
    "text": "6.2 Data Transformation\nAfter tidying up the data, when you start analyzing it, especially with secondary data, it may not always be in the exact form you need. Sometimes, you may need to add new variables using data from other variables. Other times, you may need to filter specific rows or columns from the original dataset. You might also need to summarize the data or rename the columns properly.\nThis is where the data transformation step comes in.\nThe dplyr package provides powerful tools to transform your data into the desired format. Some of the most commonly used functions in dplyr include:\n\nfilter() – Select specific rows based on conditions\nselect() – Choose specific columns\nmutate() – Create or modify columns\nsummarise() – Calculate summary statistics\narrange() – Sort rows by a column\ngroup_by() – Group data for grouped operations\nrename() – Change column names\n\nBy performing these tasks, you change the structure of the original dataset as demontrated below, which is why it’s called the data transformation step.\n\n\n\n\n\nData transformation, The original image, available here https://perso.ens-lyon.fr/lise.vaudor/dplyr/, has been updated with new additions.\n\n\n\n\n\n\n\n\n\nData transformation, The original image, available here https://perso.ens-lyon.fr/lise.vaudor/dplyr/, has been updated with new additions.\n\n\n\n\n\n\n\n\n\nData transformation, The original image, available here https://perso.ens-lyon.fr/lise.vaudor/dplyr/, has been updated with new additions.\n\n\n\n\n\n6.2.1 Example\nLet’s consider the following dataset whihc contains synthetic airline data.\nDownload the dataset: airline_data.csv Data Source: https://www.kaggle.com/datasets/iamsouravbanerjee/airline-dataset/data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndata &lt;- read_csv(here::here(\"data\", \"airline_data.csv\"))\n\nRows: 98619 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (14): Passenger ID, First Name, Last Name, Gender, Nationality, Airport ...\ndbl  (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndim(data)\n\n[1] 98619    15\n\n\n\ncolnames(data)\n\n [1] \"Passenger ID\"         \"First Name\"           \"Last Name\"           \n [4] \"Gender\"               \"Age\"                  \"Nationality\"         \n [7] \"Airport Name\"         \"Airport Country Code\" \"Country Name\"        \n[10] \"Airport Continent\"    \"Continents\"           \"Departure Date\"      \n[13] \"Arrival Airport\"      \"Pilot Name\"           \"Flight Status\"       \n\n\nDataset Glossary (Column-wise)\nPassenger ID - Unique identifier for each passenger\nFirst Name - First name of the passenger\nLast Name - Last name of the passenger\nGender - Gender of the passenger\nAge - Age of the passenger\nNationality - Nationality of the passenger\nAirport Name - Name of the airport where the passenger boarded\nAirport Country Code - Country code of the airport’s location\nCountry Name - Name of the country the airport is located in\nAirport Continent - Continent where the airport is situated\nContinents - Continents involved in the flight route\nDeparture Date - Date when the flight departed\nArrival Airport - Destination airport of the flight\nPilot Name - Name of the pilot operating the flight\nFlight Status - Current status of the flight (e.g., on-time, delayed, canceled)\nThis synthetic dataset covers global airline operations. This dataset is useful for economists because it provides information on passenger travel patterns, flight routes, and airport locations. It helps analyze how air travel affects trade, tourism, and jobs. By looking at flight status and passenger details, economists can study the impact of aviation on the economy and make decisions about transportation policies and infrastructure development.\n\ndata &lt;- data |&gt; as_tibble()\nhead(data)\n\n# A tibble: 6 × 15\n  `Passenger ID` `First Name` `Last Name` Gender   Age Nationality\n  &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      \n1 ABVWIg         Edithe       Leggis      Female    62 Japan      \n2 jkXXAX         Elwood       Catt        Male      62 Nicaragua  \n3 CdUz2g         Darby        Felgate     Male      67 Russia     \n4 BRS38V         Dominica     Pyle        Female    71 China      \n5 9kvTLo         Bay          Pencost     Male      21 China      \n6 nMJKVh         Lora         Durbann     Female    55 Brazil     \n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\nsummary(data)\n\n Passenger ID        First Name         Last Name            Gender         \n Length:98619       Length:98619       Length:98619       Length:98619      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Age       Nationality        Airport Name       Airport Country Code\n Min.   : 1.0   Length:98619       Length:98619       Length:98619        \n 1st Qu.:23.0   Class :character   Class :character   Class :character    \n Median :46.0   Mode  :character   Mode  :character   Mode  :character    \n Mean   :45.5                                                             \n 3rd Qu.:68.0                                                             \n Max.   :90.0                                                             \n Country Name       Airport Continent   Continents        Departure Date    \n Length:98619       Length:98619       Length:98619       Length:98619      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Arrival Airport     Pilot Name        Flight Status     \n Length:98619       Length:98619       Length:98619      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n\n\n\n6.2.1.1 filter: Select specific rows based on conditions\n\nTakes logical expressions and returns the rows for which all are TRUE.\n\n\nfilter(data, Age &gt; 45)\n\n# A tibble: 49,383 × 15\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality\n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      \n 1 ABVWIg         Edithe       Leggis      Female    62 Japan      \n 2 jkXXAX         Elwood       Catt        Male      62 Nicaragua  \n 3 CdUz2g         Darby        Felgate     Male      67 Russia     \n 4 BRS38V         Dominica     Pyle        Female    71 China      \n 5 nMJKVh         Lora         Durbann     Female    55 Brazil     \n 6 8IPFPE         Rand         Bram        Male      73 Ivory Coast\n 7 sBf524         Briant       De La Haye  Male      71 Russia     \n 8 PlwJZT         Kalie        Scoble      Female    47 Sweden     \n 9 iU75x3         Catriona     Beaument    Female    77 Russia     \n10 e0H5LI         Jerrine      Peeters     Female    87 Philippines\n# ℹ 49,373 more rows\n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\nfilter(data,  Nationality == \"Sri Lanka\")\n\n# A tibble: 138 × 15\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality\n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      \n 1 fhD57Z         Jordan       Fierman     Female    11 Sri Lanka  \n 2 5joYmi         Valdemar     Marcone     Male       7 Sri Lanka  \n 3 2ROpnA         Jordon       Sallowaye   Male      43 Sri Lanka  \n 4 eKkekT         Dael         Edlestone   Female    58 Sri Lanka  \n 5 5TxM24         Hiram        Memory      Male      21 Sri Lanka  \n 6 wQVX9G         Sherm        Kippie      Male      60 Sri Lanka  \n 7 fKtiLJ         Filippa      Prestige    Female    53 Sri Lanka  \n 8 q7uPji         Wainwright   Dunkerton   Male      47 Sri Lanka  \n 9 Tn9LGe         Matty        Alflat      Male       6 Sri Lanka  \n10 fZsoAD         Rowney       Messitt     Male      43 Sri Lanka  \n# ℹ 128 more rows\n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\n\n6.2.1.2 select: Choose specific columns by their names.\n\nselect(data, `Passenger ID`:Gender)\n\n# A tibble: 98,619 × 4\n   `Passenger ID` `First Name` `Last Name` Gender\n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt; \n 1 ABVWIg         Edithe       Leggis      Female\n 2 jkXXAX         Elwood       Catt        Male  \n 3 CdUz2g         Darby        Felgate     Male  \n 4 BRS38V         Dominica     Pyle        Female\n 5 9kvTLo         Bay          Pencost     Male  \n 6 nMJKVh         Lora         Durbann     Female\n 7 8IPFPE         Rand         Bram        Male  \n 8 pqixbY         Perceval     Dallosso    Male  \n 9 QNAs2R         Aleda        Pigram      Female\n10 3jmudz         Burlie       Schustl     Male  \n# ℹ 98,609 more rows\n\n\n\nselect(data, `Pilot Name`, `Flight Status`)\n\n# A tibble: 98,619 × 2\n   `Pilot Name`        `Flight Status`\n   &lt;chr&gt;               &lt;chr&gt;          \n 1 Fransisco Hazeldine On Time        \n 2 Marla Parsonage     On Time        \n 3 Rhonda Amber        On Time        \n 4 Kacie Commucci      Delayed        \n 5 Ebonee Tree         On Time        \n 6 Inglis Dolley       On Time        \n 7 Stanislas Tiffin    Cancelled      \n 8 Sharyl Eastmead     Cancelled      \n 9 Daryn Bardsley      On Time        \n10 Alameda Carlyle     On Time        \n# ℹ 98,609 more rows\n\n\nWhen you pass a vector of column names with -c(), it omits the specified columns and returns the dataframe with the remaining columns. This option is very useful when working with large datasets that have many columns, and you only need to remove a few columns to finalize the dataset.\n\nselect(data, -c(`Passenger ID`, `First Name`, `Last Name`))\n\n# A tibble: 98,619 × 12\n   Gender   Age Nationality `Airport Name` `Airport Country Code` `Country Name`\n   &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;          &lt;chr&gt;                  &lt;chr&gt;         \n 1 Female    62 Japan       Coldfoot Airp… US                     United States \n 2 Male      62 Nicaragua   Kugluktuk Air… CA                     Canada        \n 3 Male      67 Russia      Grenoble-Isèr… FR                     France        \n 4 Female    71 China       Ottawa / Gati… CA                     Canada        \n 5 Male      21 China       Gillespie Fie… US                     United States \n 6 Female    55 Brazil      Coronel Horác… BR                     Brazil        \n 7 Male      73 Ivory Coast Duxford Aerod… GB                     United Kingdom\n 8 Male      36 Vietnam     Maestro Wilso… BR                     Brazil        \n 9 Female    35 Palestinia… Venice Marco … IT                     Italy         \n10 Male      13 Thailand    Vermilion Air… CA                     Canada        \n# ℹ 98,609 more rows\n# ℹ 6 more variables: `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\n\n6.2.1.3 mutate: Create or modify columns\n\nThis function allows you to creates new variables from an existing variable.\n\n\ndata_new &lt;- data |&gt; mutate(New_Age = Age + 2)\ndata_new\n\n# A tibble: 98,619 × 16\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality          \n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;                \n 1 ABVWIg         Edithe       Leggis      Female    62 Japan                \n 2 jkXXAX         Elwood       Catt        Male      62 Nicaragua            \n 3 CdUz2g         Darby        Felgate     Male      67 Russia               \n 4 BRS38V         Dominica     Pyle        Female    71 China                \n 5 9kvTLo         Bay          Pencost     Male      21 China                \n 6 nMJKVh         Lora         Durbann     Female    55 Brazil               \n 7 8IPFPE         Rand         Bram        Male      73 Ivory Coast          \n 8 pqixbY         Perceval     Dallosso    Male      36 Vietnam              \n 9 QNAs2R         Aleda        Pigram      Female    35 Palestinian Territory\n10 3jmudz         Burlie       Schustl     Male      13 Thailand             \n# ℹ 98,609 more rows\n# ℹ 10 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;, New_Age &lt;dbl&gt;\n\n\n\ncolnames(data_new)\n\n [1] \"Passenger ID\"         \"First Name\"           \"Last Name\"           \n [4] \"Gender\"               \"Age\"                  \"Nationality\"         \n [7] \"Airport Name\"         \"Airport Country Code\" \"Country Name\"        \n[10] \"Airport Continent\"    \"Continents\"           \"Departure Date\"      \n[13] \"Arrival Airport\"      \"Pilot Name\"           \"Flight Status\"       \n[16] \"New_Age\"             \n\n\n\nThe same mutate function also allows you to update an existing variables.\n\n\ndata_new &lt;- data |&gt; mutate(`Departure Date` =as.Date(`Departure Date`, format = \"%m/%d/%Y\"))\nsummary(data_new)\n\n Passenger ID        First Name         Last Name            Gender         \n Length:98619       Length:98619       Length:98619       Length:98619      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Age       Nationality        Airport Name       Airport Country Code\n Min.   : 1.0   Length:98619       Length:98619       Length:98619        \n 1st Qu.:23.0   Class :character   Class :character   Class :character    \n Median :46.0   Mode  :character   Mode  :character   Mode  :character    \n Mean   :45.5                                                             \n 3rd Qu.:68.0                                                             \n Max.   :90.0                                                             \n Country Name       Airport Continent   Continents        Departure Date      \n Length:98619       Length:98619       Length:98619       Min.   :2022-01-01  \n Class :character   Class :character   Class :character   1st Qu.:2022-04-01  \n Mode  :character   Mode  :character   Mode  :character   Median :2022-07-01  \n                                                          Mean   :2022-07-01  \n                                                          3rd Qu.:2022-09-30  \n                                                          Max.   :2022-12-30  \n Arrival Airport     Pilot Name        Flight Status     \n Length:98619       Length:98619       Length:98619      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n\n\n\n\n6.2.1.4 summarise(British) or summarize (US) : Calculate summary statistics\n\nthis function collapses many values down to a single summary.\n\n\ndata_new |&gt;\n  summarise(\n    Departure_Date_start =min(`Departure Date`),\n    Departure_Date_end =max(`Departure Date`),\n    Age_median=median(Age),\n    Age_mean=mean(Age))\n\n# A tibble: 1 × 4\n  Departure_Date_start Departure_Date_end Age_median Age_mean\n  &lt;date&gt;               &lt;date&gt;                  &lt;dbl&gt;    &lt;dbl&gt;\n1 2022-01-01           2022-12-30                 46     45.5\n\n\nSince it contains missing values, they should be removed before calculating the summary statistics\n\ndata_new |&gt;\n  summarise(\n    Departure_Date_start =min(`Departure Date`, na.rm = TRUE),\n    Departure_Date_end =max(`Departure Date`, na.rm = TRUE),\n    Age_median=median(Age, na.rm = TRUE),\n    Age_mean=mean(Age, na.rm = TRUE))\n\n# A tibble: 1 × 4\n  Departure_Date_start Departure_Date_end Age_median Age_mean\n  &lt;date&gt;               &lt;date&gt;                  &lt;dbl&gt;    &lt;dbl&gt;\n1 2022-01-01           2022-12-30                 46     45.5\n\n\n\n\n6.2.1.5 arrange() – Sort rows by a column\n\narrange(data, desc(Age))\n\n# A tibble: 98,619 × 15\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality   \n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;         \n 1 to75jW         Pamella      Eaden       Female    90 Indonesia     \n 2 Zlsjqw         Sydney       MacGhee     Male      90 Guatemala     \n 3 aogYWd         Vernen       Ivakhnov    Male      90 China         \n 4 X0basI         Mariann      Moogan      Female    90 Philippines   \n 5 N7DLfQ         Jermaine     Escott      Male      90 Portugal      \n 6 fZhPqR         Valdemar     Whate       Male      90 Brazil        \n 7 usnzLP         Raul         Mantha      Male      90 Argentina     \n 8 L49UDI         Neall        Zamudio     Male      90 Czech Republic\n 9 L1ZBXS         Anthea       Blodget     Female    90 Indonesia     \n10 CjAY9o         Valene       Megarry     Female    90 Indonesia     \n# ℹ 98,609 more rows\n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\n\n6.2.1.6 group_by() – Group data for grouped operations\n\nThis fucntion takes an existing tibble and converts it into a grouped tibble where operations are performed “by group”. ungroup() removes grouping.\n\n\ncustomers_grouped &lt;- data |&gt; group_by(Continents )\ncustomers_grouped\n\n# A tibble: 98,619 × 15\n# Groups:   Continents [6]\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality          \n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;                \n 1 ABVWIg         Edithe       Leggis      Female    62 Japan                \n 2 jkXXAX         Elwood       Catt        Male      62 Nicaragua            \n 3 CdUz2g         Darby        Felgate     Male      67 Russia               \n 4 BRS38V         Dominica     Pyle        Female    71 China                \n 5 9kvTLo         Bay          Pencost     Male      21 China                \n 6 nMJKVh         Lora         Durbann     Female    55 Brazil               \n 7 8IPFPE         Rand         Bram        Male      73 Ivory Coast          \n 8 pqixbY         Perceval     Dallosso    Male      36 Vietnam              \n 9 QNAs2R         Aleda        Pigram      Female    35 Palestinian Territory\n10 3jmudz         Burlie       Schustl     Male      13 Thailand             \n# ℹ 98,609 more rows\n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;chr&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;\n\n\n\ndata |&gt; summarise(age_mean=mean(Age, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  age_mean\n     &lt;dbl&gt;\n1     45.5\n\n\n\ncustomers_grouped |&gt; summarise(age_mean=mean(Age, na.rm=TRUE))\n\n# A tibble: 6 × 2\n  Continents    age_mean\n  &lt;chr&gt;            &lt;dbl&gt;\n1 Africa            45.6\n2 Asia              45.7\n3 Europe            45.2\n4 North America     45.6\n5 Oceania           45.4\n6 South America     45.4\n\n\n\n\n6.2.1.7 rename() – Change column names\n\ndata &lt;- rename(data,  Passenger_ID = `Passenger ID`,\n       Airport_code = `Airport Country Code` ) # new_name = old_name\ndata\n\n# A tibble: 98,619 × 15\n   Passenger_ID `First Name` `Last Name` Gender   Age Nationality `Airport Name`\n   &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;         \n 1 ABVWIg       Edithe       Leggis      Female    62 Japan       Coldfoot Airp…\n 2 jkXXAX       Elwood       Catt        Male      62 Nicaragua   Kugluktuk Air…\n 3 CdUz2g       Darby        Felgate     Male      67 Russia      Grenoble-Isèr…\n 4 BRS38V       Dominica     Pyle        Female    71 China       Ottawa / Gati…\n 5 9kvTLo       Bay          Pencost     Male      21 China       Gillespie Fie…\n 6 nMJKVh       Lora         Durbann     Female    55 Brazil      Coronel Horác…\n 7 8IPFPE       Rand         Bram        Male      73 Ivory Coast Duxford Aerod…\n 8 pqixbY       Perceval     Dallosso    Male      36 Vietnam     Maestro Wilso…\n 9 QNAs2R       Aleda        Pigram      Female    35 Palestinia… Venice Marco …\n10 3jmudz       Burlie       Schustl     Male      13 Thailand    Vermilion Air…\n# ℹ 98,609 more rows\n# ℹ 8 more variables: Airport_code &lt;chr&gt;, `Country Name` &lt;chr&gt;,\n#   `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;, `Departure Date` &lt;chr&gt;,\n#   `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;, `Flight Status` &lt;chr&gt;\n\n\n\n\n6.2.1.8 Combine multiple operations\nYou can even combine multiple verbs at once to obtain the dataset in the desired structure. This is where the pipe operator becomes very handy.\n\ndata |&gt;\n  filter(Nationality == \"Sri Lanka\") |&gt;\n  head(2)\n\n# A tibble: 2 × 15\n  Passenger_ID `First Name` `Last Name` Gender   Age Nationality `Airport Name` \n  &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;          \n1 fhD57Z       Jordan       Fierman     Female    11 Sri Lanka   Yoshkar-Ola Ai…\n2 5joYmi       Valdemar     Marcone     Male       7 Sri Lanka   Mungeranie Air…\n# ℹ 8 more variables: Airport_code &lt;chr&gt;, `Country Name` &lt;chr&gt;,\n#   `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;, `Departure Date` &lt;chr&gt;,\n#   `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;, `Flight Status` &lt;chr&gt;\n\n\n\ndata |&gt;\n  filter(Nationality == \"Sri Lanka\") |&gt;\n  summarise(Age_mean=mean(Age, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  Age_mean\n     &lt;dbl&gt;\n1     43.9\n\n\n\ndata_new |&gt;\n  filter(Nationality == \"Sri Lanka\") |&gt;\n  group_by(Gender) |&gt;\n  filter(Age &gt; 45) |&gt;\n  arrange(desc(`Departure Date`))\n\n# A tibble: 65 × 15\n# Groups:   Gender [2]\n   `Passenger ID` `First Name` `Last Name` Gender   Age Nationality\n   &lt;chr&gt;          &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;      \n 1 Garp7s         Elwood       Seczyk      Male      61 Sri Lanka  \n 2 bmMaNv         Mellie       Werrett     Female    76 Sri Lanka  \n 3 W9kjm9         Lewes        Gollard     Male      75 Sri Lanka  \n 4 C5sSaq         Jose         Duffit      Male      87 Sri Lanka  \n 5 YpH6kH         Xenos        McEntagart  Male      71 Sri Lanka  \n 6 lXSEsW         Ad           Fernihough  Male      48 Sri Lanka  \n 7 5OPpWn         Marieann     Strelitzki  Female    77 Sri Lanka  \n 8 oCZkZ2         Aaron        MacCaffery  Male      83 Sri Lanka  \n 9 L7ut1f         Dell         Shreenan    Male      62 Sri Lanka  \n10 soCbR1         Matthieu     Matches     Male      47 Sri Lanka  \n# ℹ 55 more rows\n# ℹ 9 more variables: `Airport Name` &lt;chr&gt;, `Airport Country Code` &lt;chr&gt;,\n#   `Country Name` &lt;chr&gt;, `Airport Continent` &lt;chr&gt;, Continents &lt;chr&gt;,\n#   `Departure Date` &lt;date&gt;, `Arrival Airport` &lt;chr&gt;, `Pilot Name` &lt;chr&gt;,\n#   `Flight Status` &lt;chr&gt;",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "7  Data Visualization",
    "section": "",
    "text": "7.1 The ggplot2 API\nThe ggplot2 package structures plots using eight key components (layers):\nThe ggplot2 API\nIn each layer, we aim to answer a specific question:\nBy layering these components, ggplot2 provides a flexible and structured approach to building effective visualizations\nNow, let’s see how to create a plot using ggplot2.\nLet’s start with the foundational layer: the data layer",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#the-ggplot2-api",
    "href": "dataviz.html#the-ggplot2-api",
    "title": "7  Data Visualization",
    "section": "",
    "text": "Data – What dataset should be used for the visualization?\nMapping (Aesthetics - aes) – How should the data be mapped to visual properties? (e.g., x-axis, y-axis, color, size)*\nStatistics (stat) – Should any transformations or summaries be applied? (e.g., smoothing, binning, aggregation)\nScales – How should data values be translated into visual properties? (e.g., color gradients, axis scales)\nGeometries (geom) – What type of plot best represents the data? (e.g., points, lines, bars)\nFacets – Should the data be divided into multiple panels for better comparison?\nCoordinates (coord) – Which coordinate system should be used? (e.g., Cartesian, polar)\nTheme – How should the overall appearance of the plot be styled? (e.g., fonts, background, gridlines)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#data-layer",
    "href": "dataviz.html#data-layer",
    "title": "7  Data Visualization",
    "section": "7.2 Data Layer",
    "text": "7.2 Data Layer\nThis layer asks the question: What dataset should be used for the visualization?\nIn this example, I am going to use South Asian economic indicators from the World Bank, covering the years 1960 to 2017.\nDownload the dataset: SAeconomy.csv\nDataset Glossary (Column-wise)\nCountry: The country or region of the series.\nGDP: Gross domestic product (in $USD February 2019).\nGrowth: Annual percentage growth in GDP.\nCPI: Consumer price index (base year 2010).\nImports: Imports of goods and services (% of GDP).\nExports: Exports of goods and services (% of GDP).\nPopulation: Total population.\nFor the initial exploration, I am going to filter the economic health data specifically related to Sri Lanka and analyze the country’s economic health .\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nSAeconomy_data &lt;- read_csv(here::here(\"data\", \"SAeconomy.csv\" ))\n\nRows: 464 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Country, Code\ndbl (7): Year, GDP, Growth, CPI, Imports, Exports, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nSLeconomy &lt;- SAeconomy_data |&gt;\n  filter(Country == \"Sri Lanka\")\n\nSLeconomy\n\n# A tibble: 58 × 9\n   Country   Code   Year         GDP Growth   CPI Imports Exports Population\n   &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n 1 Sri Lanka LKA    1960 1409873950.  NA     1.49    32.9    30.0    9874481\n 2 Sri Lanka LKA    1961 1444327731.  NA     1.50    28.5    27.5   10111646\n 3 Sri Lanka LKA    1962 1434156379.   3.82  1.53    29.2    27.8   10352188\n 4 Sri Lanka LKA    1963 1240672269.   2.52  1.56    27.5    25.8   10597520\n 5 Sri Lanka LKA    1964 1309747899.   3.91  1.61    26.7    24.6   10849979\n 6 Sri Lanka LKA    1965 1698319328.   2.54  1.62    25.5    25.9   11110828\n 7 Sri Lanka LKA    1966 1751470588.   5.02  1.61    25.8    22.4   11380683\n 8 Sri Lanka LKA    1967 1859465021.   6.44  1.65    23.3    20.5   11657660\n 9 Sri Lanka LKA    1968 1801344538.   5.80  1.74    23.6    20.6   11937611\n10 Sri Lanka LKA    1969 1965546218.   7.72  1.87    24.6    18.4   12214968\n# ℹ 48 more rows\n\n\nA ggplot function call begins with the ggplot() function.\n\nggplot()\n\n\n\n\n\n\n\n\nThis call is similar to taking a blank piece of paper to draw a plot, where you set the foundation for what will be visualized. In the data layer, you have to specify what dataset you want to use for the visualization. In this case, the dataset will be the economic health data for Sri Lanka.\n\nggplot(data =  SLeconomy)\n\n\n\n\n\n\n\n\nYou’re still getting the same result because ggplot() doesn’t know how to work with the dataset until you tell it what to plot and how to map the data to the axes and visual elements.\nThis is done using the second layer, the Mapping layer.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#mapping-layer",
    "href": "dataviz.html#mapping-layer",
    "title": "7  Data Visualization",
    "section": "7.3 Mapping Layer",
    "text": "7.3 Mapping Layer\nIn this layer you define how the data should be represented visually, such as which variables to map to the x-axis, y-axis, and other visual elements.\n\nggplot(data =  SLeconomy,\n       mapping = aes(x = Year,\n                     y = GDP))\n\n\n\n\n\n\n\n\nWith the Mapping layer, we define what we want to see on the graph. For example, if I want to see the trend in the GDP series over the years, I select the relevant columns and map them to the x-axis and y-axis. This will label the axes with the selected variable names. However, you still can’t see a visual representation in the plotting panel. That’s because you need to specify how to draw the plot and what kind of geometry to use to represent the data values. This is where the Geometries layer comes in.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#geometries-layer",
    "href": "dataviz.html#geometries-layer",
    "title": "7  Data Visualization",
    "section": "7.4 Geometries Layer",
    "text": "7.4 Geometries Layer\nThe Geometries layer is concerned with the shape of the data. In this case, since I have a time series, I can represent the data by using a line to show how the values change over the years.\nWe connect each layer with a plus sign (+), because it essentially “adds layers” to the existing plot, building on top of what was already defined.\n\nggplot(data =  SLeconomy,\n       mapping = aes(x = Year,\n                     y = GDP)) + \n  geom_line()\n\n\n\n\n\n\n\n\nAlthough the grammar of graphics framework has 8 layers, only 3 are necessary to create a meaningful plot. The other layers are optional.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#visualize-data-like-a-pro-in-ggplot2-with-esquisse-package",
    "href": "dataviz.html#visualize-data-like-a-pro-in-ggplot2-with-esquisse-package",
    "title": "7  Data Visualization",
    "section": "7.5 Visualize Data Like a Pro in ggplot2 with esquisse package",
    "text": "7.5 Visualize Data Like a Pro in ggplot2 with esquisse package\nWhen you install R, it automatically adds some packages. One important package is the Esquisse package, which helps you explore and visualize your data interactively.\nIn RStudio, you can use the Addins menu to launch the esquisse. Select ‘ggplot2’ builder under the ESQUISSE option.\n\n\n\n\n\nesquisse package\n\n\n\n\nOr in the R console run:\n\nesquisser()\n\nA window will appear for importing data. If you have active datasets in your current working directory, you can select the required dataset from the ‘Select a data.frame:’ dropdown menu under the Environment panel.\n\n\n\n\n\nesquisse package: Import active dataframe\n\n\n\n\nIf you want to load an external file, go to the ‘External File’ panel, upload the file and select import.\n\n\n\n\n\nesquisse package: Import external datafile\n\n\n\n\nLet’s try to recreate the same plot we made earlier using the esquisse package.\nTo select aesthetics, click the gear icon in the top right corner, then drag and drop the options into the aesthetics boxes to create your plot.\n\n\n\n\n\nesquisse package: Create visual representation\n\n\n\n\nNow you can get the code for this visualization by using the ‘Reverse Engineer Your Visualizations’ option. Just select ‘Code’ to see it.\n\n\n\n\n\nesquisse package: Create visual representation",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#statistics-layer",
    "href": "dataviz.html#statistics-layer",
    "title": "7  Data Visualization",
    "section": "7.6 Statistics Layer",
    "text": "7.6 Statistics Layer\nSometimes, certain plots require the calculation of summary statistics. For example, to create a pie chart, you need percentages, or to produce a box plot, you need five summary statistics: the quartiles, minimum, and maximum. This is where the statistics layer comes in.\nHowever, in practice, we rarely call the statistics layer directly. That’s because most of the statistical calculations are done automatically behind the scenes when creating geometric shapes. As a result, we don’t usually define them explicitly; the geom layer handles that for us. Each geom has a default stat.\n\n\n\nStatistics\nGeometries\n\n\n\n\nstat_count\ngeom_bar\n\n\nstat_boxplot\ngeom_boxplot\n\n\nstat_identity\ngeom_col\n\n\nstat_bin\ngeom_bar, geom_histogram\n\n\nstat_density\ngeom_density",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#scales-layer",
    "href": "dataviz.html#scales-layer",
    "title": "7  Data Visualization",
    "section": "7.7 Scales Layer",
    "text": "7.7 Scales Layer\nThe scales layer in ggplot2 defines how the data values are mapped to visual properties, such as colors, sizes, and positions in the plot. For example, you can change the scale of the x or y-axis, adjust color gradients, or set custom limits for the data values using the scales layer.\n\nggplot(SAeconomy_data) +\n  aes(x = Year, \n      y = GDP, \n      colour = Country,\n      shape = Country) +\n  geom_line() +\n  scale_x_continuous( breaks = c(1960, 1980, 2000, 2010, 2017)) +\n  scale_colour_viridis_d(direction = 1, option= 'plasma') +\n  scale_shape_manual( values = 17:24) \n\nWarning: Removed 40 rows containing missing values or values outside the scale range\n(`geom_line()`).",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#facets-layer",
    "href": "dataviz.html#facets-layer",
    "title": "7  Data Visualization",
    "section": "7.8 Facets Layer",
    "text": "7.8 Facets Layer\nThe Facets layer answers the question: Should the data be split into multiple panels for easier comparison?\n\nggplot(SAeconomy_data) +\n aes(x = Year, y = GDP, colour = Country) +\n geom_line() +\n scale_color_viridis_d(option = \"plasma\", \n direction = 1) +\n theme_minimal() +\n facet_wrap(vars(Country))\n\nWarning: Removed 40 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThe code above was generated with the help of the esquisse package. I used ‘country’ as a facet variable to divide the data into multiple panels for better comparison.\n\n\n\n\n\nesquisse package: Create visual representation\n\n\n\n\nNow we can see that the y-axis follows a common scale, which makes it difficult to observe the temporal pattern for low GDP levels, as the series with higher values dominate the visualization. To address this, we can set the scales argument in facet_wrap to ‘free_y’.\n\nggplot(SAeconomy_data) +\n aes(x = Year, y = GDP, colour = Country) +\n geom_line() +\n scale_color_hue(direction = 1) +\n theme_minimal() +\n facet_wrap(vars(Country), scales = \"free_y\")\n\nWarning: Removed 40 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThe code above was generated with the help of the esquisse package.\n\n\n\n\n\nesquisse package: Create visual representation\n\n\n\n\n\n\n\n\n\nesquisse package: Create visual representation",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#coordinates-layer",
    "href": "dataviz.html#coordinates-layer",
    "title": "7  Data Visualization",
    "section": "7.9 Coordinates Layer",
    "text": "7.9 Coordinates Layer\nCoordinates (coord) layer answer the question: Which coordinate system should be used (e.g., Cartesian, polar)? In the above example, we’ve used the Cartesian coordinate system, which is the default.\nThere are two types of coordinate systems: - Linear coordinate systems : coord_cartesian(), coord_flip(), coord_fixed()\n\nNon-linear coordinate systems: coord_map(), coord_quickmap(), coord_sf(), coord_polar(), coord_trans()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#theme-layer",
    "href": "dataviz.html#theme-layer",
    "title": "7  Data Visualization",
    "section": "7.10 Theme Layer",
    "text": "7.10 Theme Layer\nThemes layer controls all the non-data elements of the plot, such as labels, titles, background, and grid lines.\n\nggplot(SAeconomy_data) +\n  aes(x = Year, y = GDP, colour = Country) +\n  geom_line() +\n  scale_color_hue(direction = 1) +\n  labs(\n    x = \"Time\",\n    y = \"GDP Growth\",\n    title = \"Annual GDP Growth \",\n    subtitle = \"South Asian Countries\"\n  ) +\n  ggthemes::theme_base()\n\nWarning: Removed 40 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThe code above was generated with the help of the esquisse package.\n\n\n\n\n\nesquisse package: Create visual representation\n\n\n\n\n\n\n\n\n\nesquisse package: Create visual representation",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "statmodelling.html",
    "href": "statmodelling.html",
    "title": "8  Introduction to Statistical Modelling",
    "section": "",
    "text": "R provides tools for everything from simple linear regression to complex machine learning algorithms.\nBelow are some key resources that will help you develop expertise in statistical modeling with R.\n\nData Visualisation Geometries Encyclopedia: Geoms in the Grammar of Graphics: All Types of Plots by Thiyanga Talagala\nThis encyclopedia is a curated collection of geom available in different R programming software packages. This book can also be considered as an “Encyclopedia of Plots”.\nR for Data Science by by Hadley Wickham and Garrett Grolemund\nThis is a great data science book for beginners interested in learning data science with R.\nAdvanced R by Hadley Wickham\nThis book aimed at intermediate and advanced R users.\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham\nThis book gives details on the basics of ggplot2 and Grammar of Graphics that ggplot2 uses.\nAn Introduction to Statistical Learning with Applications in R by Gareth M. James, Daniela Witten, Trevor Hastie, Robert Tibshirani\nThis book covers topics, ranging from basic concepts to advanced machine learning techniques.\nForecasting: Principles and Practice by Rob J Hyndman and George Athanasopoulos\nThis textbook provides a comprehensive introduction to time series analysis and forecasting method.\nIntroduction to Econometrics with R by Christoph Hanck, Martin Arnold, Alexander Gerber, and Martin Schmelzer\nThis book is an empirical companion to Introduction to Econometrics by Stock and Watson (2020).\nCRAN Task View: Econometrics\nThe CRAN Task View offers a comprehensive list of R packages specifically for econometrics, providing useful tools for economic data analysis and modeling\nGeocomputation with R by Robin Lovelace, Jakub Nowosad and Jannes Muenchow\nThis book covers geographic data analysis, visualization, and modeling techniques\nThe ceylon R package by Thiyanga Talagala\n\nThe ceylon R package enables easy map visualization of Sri Lanka.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Introduction to Statistical Modelling</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Wickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”.\nWickham, H. (2019). Advanced r. chapman and hall/CRC.",
    "crumbs": [
      "References"
    ]
  }
]