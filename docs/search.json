[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with R for Economists",
    "section": "",
    "text": "Preface\nR is a free and powerful software environment for statistical computing and data visualization. It is widely used in academia and industry for data analysis and research. As one of the top programming languages for data science, R provides a variety of tools for statistical modeling, computing, and visualization.\nSince empirical research is essential in economics, programming skills are crucial for conducting real-world data analysis. This textbook will introduce you to R and help you develop fundamental data science skills.\n\nAbout This Book\nThis textbook is designed for beginners, providing a strong foundation in R for economic research. It focuses on the tidyverse ecosystem, a collection of R packages that provide a simple yet powerful approach to data analysis. You will learn how to use tidy tools to manage and analyze data efficiently, covering the entire lifecycle of a data science project.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction to R and RStudio",
    "section": "",
    "text": "1.1 Installing R and Rstudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#installing-r-and-rstudio",
    "href": "intro.html#installing-r-and-rstudio",
    "title": "1  Introduction to R and RStudio",
    "section": "",
    "text": "Step 1: First download R freely from the Comprehensive R Archive Network (CRAN) https://cran.r-project.org/. (At the moment of writing, R 4.4.2 is the latest version. Choose the most recent one.)\nStep 2: Then install R Studio’s IDE (stands for integrated development environment), a powerful user interface for R from [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/. Get the Open Source Edition of RStudio Desktop. RStudio allows you to run R in a more user-friendly environment.\n\nYou need to install both R and Rstudio to use RStudio.\nIf you have a pre-existing installation of R and/or RStudio, I highly recommend that you reinstall both and get as current as possible.\n\nStep 3: Then open Rstudio.\n\n\n1.1.1 Posit Cloud\n\nIn 2022, RStudio changed its corporate name to Posit with the aim of expanding its focus beyond R to include users of Python and Visual Studio Code.\nIf you don’t want to download or install R and R Studio, you can use RStudio on Posit Cloud (https://posit.cloud/) for free.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#rstudio-layout",
    "href": "intro.html#rstudio-layout",
    "title": "1  Introduction to R and RStudio",
    "section": "1.2 RStudio layout",
    "text": "1.2 RStudio layout\nThe RStudio interface consists of four panes: See Figure 1)\n\nSource pane\nConsole pane\nEnvironment pane, containing the Environment, History, Connections, Build, and Tutorial tabs\nOutput pane, containing the Files, Plots, Packages, Help, Viewer, and Presentation tabs\n\n\n\n\n\n\nRStudio layout\n\n\n\n\n\n1.2.1 Console Pane\n\nThis is where you type and execute all your R commands.\nYou can enter R commands after the ‘&gt;’ prompt, and R will process and execute them.\nThis is the most essential window, as it is where R performs computations and executes your instructions.\n\n\n\n1.2.2 Source pane\n\nIn this window, a collection of commands (scripts) can be edited and saved.\nIf this window is not visible, you can open it via File → New File → R Script.\nSimply typing a command in the Source pane is not enough; it must be sent to the Console before R executes it.\nTo run a line from the Source pane, place your cursor on the desired line or select multiple lines to execute, then click Run or press CTRL + ENTER to send them to the Console pane.\nMake sure to save the ‘Untitled1’ file as a *.R script.\n\n\n\n1.2.3 Environment pane\n\nThis window contains multiple tabs: Environment, History, Connections, Build, and Tutorial.\n\nThe Environment tab displays all active objects.\n\nFor data frames, clicking the grid symbol opens the full data frame in the Source pane.\nThe History tab shows previously typed commands.\nTo send a command in the history tab to the Source pane, select it and click the “To Source” icon, or click “To Console” to execute it in the Console.\n\n\n\n1.2.4 Output Pane\n\nThis window contains multiple tabs: Files, Plots, Packages, Help, Viewer, and Presentation.\nIt allows you to open files, view plots (including previous ones), install and load packages, access help functions, and display web content such as Shiny apps and Quarto-generated web pages.\n\nNow you are familiar with the layout. Let’s begin with R basics.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#installing-an-r-package",
    "href": "intro.html#installing-an-r-package",
    "title": "1  Introduction to R and RStudio",
    "section": "1.3 Installing an R Package",
    "text": "1.3 Installing an R Package\n\nThe primary source for R packages is CRAN (Comprehensive R Archive Network).\nPackages can be installed using the install.packages() function in R.\nTo install a single package, pass its name as the first argument to install.packages().\nThe following code installs the tidyverse package from CRAN:\n\n\ninstall.packages(\"tidyverse\")\n\n\nThis command downloads and installs the tidyverse package from CRAN.\nAny dependencies required by the package will also be downloaded and installed.\nInstalling the tidyverse package may take several minutes, but you only need to do this once. Think of it like installing a mobile app—you install it once on your smartphone and can use its features until a new version is released, at which point you may need to update it\n\n\n1.3.1 Alternative way to install R packages in Rstudio\n\nAn alternative way to install R packages is through the Packages tab in the Output Pane.\nNavigate to the Packages tab in the Output Pane and click Install.\nUnder “Install from,” select “Repository (CRAN)”.\nIn the Packages field, enter the name of the package you want to install.\nTo install multiple packages at once, separate the package names with commas.\nFinally, click Install.\n\n\n\n\n\n\nAlternative way to install R packages in Rstudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#loading-an-r-package",
    "href": "intro.html#loading-an-r-package",
    "title": "1  Introduction to R and RStudio",
    "section": "1.4 Loading an R Package",
    "text": "1.4 Loading an R Package\n\nInstalling a package does not automatically make it available for use; you must load it. It’s like a mobile app—you need to open it to access its functionalities.\nThe library() function is used to load installed packages into R.\nTo load the tidyverse package, use:\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nNote: Do not put the package name in quotes when using library().\nSome packages display messages when loaded, while others do not.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "intro.html#getting-started-with-r",
    "href": "intro.html#getting-started-with-r",
    "title": "1  Introduction to R and RStudio",
    "section": "1.5 Getting Started with R",
    "text": "1.5 Getting Started with R\nFor a detailed introduction to R, refer to:\nAn Introduction to R: https://cran.r-project.org/doc/manuals/R-intro.pdf",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to R and RStudio</span>"
    ]
  },
  {
    "objectID": "rbasics.html",
    "href": "rbasics.html",
    "title": "2  R Programming Basics",
    "section": "",
    "text": "2.1 Data structures\nData Structure Types. Image Source: http://venus.ifca.unican.es/Rintro/dataStruct.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#data-structures",
    "href": "rbasics.html#data-structures",
    "title": "2  R Programming Basics",
    "section": "",
    "text": "R’s basic data structures can be grouped by:\n\nTheir dimensions (1D, 2D, or multi-dimensional).\nWhether they store one type of data (homogeneous) or different types of data (heterogeneous).\n\nThis gives us five common data structures in R:\n\nHomogeneous (same type of data): Vectors, Matrices, Arrays\nHeterogeneous (different types of data): Data Frames, Lists\n\n\n\n\nAmong these, vectors and data frames are the most commonly used data structures in practical applications.\n\n\n2.1.1 Vectors\nCreating vectors\nSyntax\nvector_name &lt;- c(element1, element2, element3)\nExample\n\nx &lt;- c(5, 6, 3, 1, 100)\nx\n\n[1]   5   6   3   1 100\n\n\nCombine two vectors\n\np &lt;- c(1, 2, 3)\np\n\n[1] 1 2 3\n\nq &lt;- c(10, 20, 30)\nq\n\n[1] 10 20 30\n\nr &lt;- c(p, q)\nr\n\n[1]  1  2  3 10 20 30\n\n\nVector with charactor elements\n\ncountries &lt;- c(\"Sri Lanka\", \"Afghanistan\", \"Bangladesh\", \"Bhutan\", \"India\", \"Iran\", \"Maldives\", \"Nepal\", \"Pakistan\")\n\ncountries\n\n[1] \"Sri Lanka\"   \"Afghanistan\" \"Bangladesh\"  \"Bhutan\"      \"India\"      \n[6] \"Iran\"        \"Maldives\"    \"Nepal\"       \"Pakistan\"   \n\n\nLogical vector\n\nresult &lt;- c(TRUE, FALSE, FALSE, TRUE, FALSE)\nresult\n\n[1]  TRUE FALSE FALSE  TRUE FALSE\n\n\nSimplifying vector creation\n\nrep is a function in R that repeats the values in a vector\n\n\nid &lt;- 1:10\nid\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ntreatment &lt;- rep(1:3, each=2)\ntreatment\n\n[1] 1 1 2 2 3 3\n\n\nVector operations\n\nx &lt;- c(1, 2, 3)\ny &lt;- c(10, 20, 30)\nx+y\n\n[1] 11 22 33\n\np &lt;- c(100, 1000)\nx+p\n\nWarning in x + p: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  101 1002  103",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#data-frames",
    "href": "rbasics.html#data-frames",
    "title": "2  R Programming Basics",
    "section": "2.2 Data Frames",
    "text": "2.2 Data Frames\nRequired R package to deal with data frames\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCreate a tibble\n\nA tibble is an improved version of a traditional data frame in R, designed to be more user-friendly and consistent.\nIt is part of the tidyverse package and makes it easier to view and analyze data, especially when working with large datasets.\n\nLets consider the following example\nGDP per capita (current US$) - South Asia\nData Source : https://data.worldbank.org/\n\n\n\nCountry\nMost Recent Year\nMost Recent Value\n\n\n\n\nAfghanistan\n2023\n415.7\n\n\nBangladesh\n2023\n2,551.0\n\n\nBhutan\n2023\nNA\n\n\nIndia\n2023\n2,480.8\n\n\nMaldives\n2023\n12,530.4\n\n\nNepal\n2023\n1,377.6\n\n\nPakistan\n2023\n1,365.3\n\n\nSri Lanka\n2023\n3,828.0\n\n\n\n\ncountry &lt;- c(\"Afghanistan\", \"Bangladesh\", \"Bhutan\", \"India\", \"Maldives\",\n             \"Nepal\", \"Pakistan\", \"Sri Lanka\")\nyear &lt;- c(rep(2023,8))\nvalue &lt;- c(415.7, 2551.0, NA, 2480.8, 12530.4, 1377.6, 1365.3, 3828.0)\n\nfinal &lt;- tibble(Country = country, Recent_Year = year, Value = value )\nfinal\n\n# A tibble: 8 × 3\n  Country     Recent_Year  Value\n  &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan        2023   416.\n2 Bangladesh         2023  2551 \n3 Bhutan             2023    NA \n4 India              2023  2481.\n5 Maldives           2023 12530.\n6 Nepal              2023  1378.\n7 Pakistan           2023  1365.\n8 Sri Lanka          2023  3828",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#functions-in-r",
    "href": "rbasics.html#functions-in-r",
    "title": "2  R Programming Basics",
    "section": "2.3 Functions in R",
    "text": "2.3 Functions in R\n\nIn R, functions are blocks of code that perform specific tasks.\nThey take input values (called arguments), process them, and return an output.\nFunctions help automate repetitive tasks and make code more efficient.\nThere are two main types of functions in R:\n\nBuilt-in functions – Predefined in R (e.g., mean(), sum(), rep()).\n\n\n\nsummary(final$Value)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  415.7  1371.5  2480.8  3507.0  3189.5 12530.4       1 \n\n\n- User-defined functions – Created by users for specific needs using function().",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#subsetting",
    "href": "rbasics.html#subsetting",
    "title": "2  R Programming Basics",
    "section": "2.4 Subsetting",
    "text": "2.4 Subsetting\n\nfinal\n\n# A tibble: 8 × 3\n  Country     Recent_Year  Value\n  &lt;chr&gt;             &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan        2023   416.\n2 Bangladesh         2023  2551 \n3 Bhutan             2023    NA \n4 India              2023  2481.\n5 Maldives           2023 12530.\n6 Nepal              2023  1378.\n7 Pakistan           2023  1365.\n8 Sri Lanka          2023  3828 \n\nfinal[1, 1]\n\n# A tibble: 1 × 1\n  Country    \n  &lt;chr&gt;      \n1 Afghanistan\n\n\n\nfinal[, 1]\n\n# A tibble: 8 × 1\n  Country    \n  &lt;chr&gt;      \n1 Afghanistan\n2 Bangladesh \n3 Bhutan     \n4 India      \n5 Maldives   \n6 Nepal      \n7 Pakistan   \n8 Sri Lanka  \n\nfinal[1, ]\n\n# A tibble: 1 × 3\n  Country     Recent_Year Value\n  &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt;\n1 Afghanistan        2023  416.\n\nfinal$Country\n\n[1] \"Afghanistan\" \"Bangladesh\"  \"Bhutan\"      \"India\"       \"Maldives\"   \n[6] \"Nepal\"       \"Pakistan\"    \"Sri Lanka\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#help-file-for-built-in-functions",
    "href": "rbasics.html#help-file-for-built-in-functions",
    "title": "2  R Programming Basics",
    "section": "2.5 Help file for Built-in functions",
    "text": "2.5 Help file for Built-in functions\n\nTo access the help file for a built-in function in R, you can use either ? or the help() function.\nRunning either of these commands will open the help page for the specified function.\n\n= For example, using ?summary or help(summary) will display the help file for the summary function, which is part of the base R package.\n\n?summary\n\n# or \n\nhelp(summary)\n\n\n\n\n\n\nHelp Page",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#commenting",
    "href": "rbasics.html#commenting",
    "title": "2  R Programming Basics",
    "section": "2.6 Commenting",
    "text": "2.6 Commenting\n\nmean(final$Value) # Calculate the average GDP value\n\n[1] NA\n\n\nWhen you go to the help page for the mean() function, you’ll find that by default, the na.rm argument is set to FALSE. This means that if the data contains missing values (NA), they will be included in the calculation, and the result will also be NA. To calculate the mean while ignoring missing values, you should set na.rm = TRUE.\n\nmean(final$Value, na.rm = TRUE) # Calculate the average GDP value\n\n[1] 3506.971",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rbasics.html#pipe-operator",
    "href": "rbasics.html#pipe-operator",
    "title": "2  R Programming Basics",
    "section": "2.7 Pipe operator (|>)",
    "text": "2.7 Pipe operator (|&gt;)\n\nThe pipe operator (|&gt;) in the base R package helps improve the readability of your code.\nIt takes the output of one function and passes it directly into another function as an argument, making the steps in your data analysis more connected.\nInstead of using nested function calls like function(first_input, other_inputs), you can write the same command in a simpler format: first_input |&gt; function(other_inputs).\n\n\n\n\n\n\nPipe Operator\n\n\n\n\n\nTherefore, using the pipe operator allows you to chain multiple operations together in a way that is easier to read and understand compared to nested function calls.\n\n\n# Nested function call\nmean(final$Value, na.rm = TRUE)\n\n[1] 3506.971\n\n\n\n# Using pipe operator) \nfinal$Value |&gt; mean(na.rm=TRUE)\n\n[1] 3506.971",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Programming Basics</span>"
    ]
  },
  {
    "objectID": "rprojects.html",
    "href": "rprojects.html",
    "title": "3  Scripts and Rstudio Projects",
    "section": "",
    "text": "3.1 Working with R Scripts\nWorking with R script files",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "rprojects.html#working-with-r-scripts",
    "href": "rprojects.html#working-with-r-scripts",
    "title": "3  Scripts and Rstudio Projects",
    "section": "",
    "text": "To open a script file, go to File -&gt; New File -&gt; R Script.\nYou can use a script file to save your code so you don’t have to re-type everything when you start a new R session.\nJust typing a command in the script file isn’t enough. It must be sent to the Console before R can execute it.\nTo run a line of code from the script, place your cursor on the line (or select multiple lines), then click Run or press CTRL + ENTER to send them to the Console.\nRemember to save your script with the *.R extension and give it a suitable name, not as ‘Untitled1’.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "rprojects.html#working-with-rstudio-projects",
    "href": "rprojects.html#working-with-rstudio-projects",
    "title": "3  Scripts and Rstudio Projects",
    "section": "3.2 Working with RStudio Projects",
    "text": "3.2 Working with RStudio Projects\nWhen you start working on large projects, you’ll need to manage multiple files, such as input data, script files, and figures. Being organized is very important to manage your work efficiently. This is where RStudio projects help. RStudio projects allow you to keep all the documents related to a project in one folder.\nTo create an RStudio project, go to File -&gt; New Project -&gt; New Directory -&gt; New Project, and then choose a suitable name for the folder to store your work. You also need to pick a location to save your project by setting the “Create project as subdirectory of” option. In the following example, I named my project “Test” and selected the Desktop to store it.\n\n\n\n\n\nWorking with RStudio Projects\n\n\n\n\nOnce this is done, I now have a new RStudio project called “Test” on my Desktop. This project looks like a regular folder where I can save all my work. If you open the folder, you will see a .Rproj file (R Project file). In my example, since I saved my project as “Test,” the R project file is called “Test.Rproj.” Inside this folder, you can create subfolders, like one for figures called figures, another for raw data files called data, and another for your R script files called scripts.\nLet’s say you’re done working on the project for the day. Now, close the project and quit RStudio.\nThe next day, when you come back to the project, locate the folder (in my case, it’s on the Desktop), open it, and double-click the .Rproj file. This will reopen the project, and you’ll pick up right where you left off. You’ll have access to all the files you’ve saved inside the RStudio Project.\nThe only things you can’t retrieve are the commands you typed directly into the console and any unsaved outputs, like summary statistics or figures that were not saved.\nBut script files at least allow you to save time by preventing you from retyping commands or complex code you’ve already written in previous sessions. They’re better than typing directly into the console.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Scripts and Rstudio Projects</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "R for Data Science (2e) : https://r4ds.hadley.nz/workflow-scripts.html\nAdvanced R: https://adv-r.hadley.nz/",
    "crumbs": [
      "References"
    ]
  }
]